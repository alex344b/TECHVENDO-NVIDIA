@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@inject LoginService LoginService
@inject LoginState LoginInfo

<Nav class="navbar navbar-expand-lg navbar-dark bg-dark sticky-top" style="background-color: #2D2D2D; justify-content: flex-start;">
  <div class="container">
    <a class="navbar-brand" href="/" style="color: #FFFFFF; margin-left: 40px;">TECHVENDO</a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
      <div class="navbar-nav mr-auto">
        <a class="nav-link active" href="/" style="color: #FFFFFF; font-style: italic; margin-left: 10px;">Home</a>
        <a class="nav-link" href="/products" style="color: #FFFFFF; font-style: italic; margin-left: 10px;">Products</a>
        <a class="nav-link" href="/profilesearch" style="color: #FFFFFF; font-style: italic; margin-left: 10px;">Profile Search</a>
        <a class="nav-link" href="/aboutus" style="color: #FFFFFF; font-style: italic; margin-left: 10px;">About Us</a>
      </div>
    </div>
        @if (LoginInfo.UserLoggedIn)
        {
            <a class="nav-link" @onclick="directToProfilePage" style="font-weight: bold; ">@LoginInfo.UserFirstname @LoginInfo.UserLastname</a>
            <a class="nav-link" @onclick="Logout">Logout</a>

        } else
        {
            <a class="nav-link" @onclick="directToLoginPage">Login</a>
        }    
      
    </div>
</Nav>

@if (loggedOut)
{
    <div class="alert alert-warning alert-dismissible fade show" style="background-color: #226990" role="alert">
        <strong style="color: #ffff">Attention!</strong> <p style="color: #ffff">You are now logged out</p>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    LoginService.NavigateToLogin("/");
    LoginInfo.UserLoggedIn = LoginService.UserLoggedIn;
    LoginService.OnLoginStatusChanged += UpdateLoginState;

    Timer(3000);
}

<style>
    .navbar.navbar-expand-lg.navbar-dark.bg-dark.sticky-top {
        background-color: #2D2D2D;
        justify-content: flex-start;
    }

    .container {
        display: grid;
        grid-template-columns: auto 1fr auto;
    }

    .nav-link {
        color: #FFFFFF;
        font-style: italic;
        margin-left: 10px;
    }

        .nav-link.active {
        }

        .nav-link:hover {
            color: #FFFFFF;
            background-color: #424242;
            border-radius: 10px;
            cursor: pointer;
        }

    .sticky-top {
        position: sticky;
        top: 0;
        z-index: 1020;
    }

    .login-btn {
        color: #FFFFFF;
        font-style: italic;
        margin-left: 10px;
        text-decoration: none;
    }

        .login-btn:hover {
            color: #FFFFFF;
            background-color: #424242;
            border-radius: 10px;
        }

</style>

@code {
    bool loggedOut = false;

    public void Logout()
    {
        LoginService.OnLoginStatusChanged -= UpdateLoginState;
        LoginService.LogOut();
        LoginInfo.SetLoggedOut();
        StateHasChanged();
        loggedOut = true;
    }

    private void UpdateLoginState()
    {
        LoginInfo.UserLoggedIn = LoginService.UserLoggedIn;
        StateHasChanged();
    }


    private void directToLoginPage()
    {
        LoginService.OnLoginStatusChanged -= UpdateLoginState;

        string returnUrl = NavigationManager.Uri;
        LoginService.NavigateToLogin(returnUrl);

        LoginInfo.UserLoggedIn = LoginService.UserLoggedIn;
        LoginService.OnLoginStatusChanged += UpdateLoginState;
        loggedOut = false;
    }

    private void directToProfilePage()
    {
        NavigationManager.NavigateTo($"/profileviewer/{LoginInfo.ProfileId}");
    }

    async Task Timer(int delayInMs)
    {
        await Task.Delay(delayInMs);
        loggedOut = false;
        StateHasChanged();
    }
}