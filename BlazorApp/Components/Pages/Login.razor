@page "/login"
@using Npgsql;
@inject NavigationManager NavigationManager
@inject LoginService LoginService
@inject Layout.NavMenu navMenu

<PageTitle>TechVendo</PageTitle>

<body>
</body>

<div class="container">
    <h1 class="loginTitle">LOG IN</h1>
        <div class="EmailPassword">
            <input class="email" @oninput="UpdateEmail" @onkeydown="EnterKeyPressed" @bind="userLoggingIn.Email" placeholder="Enter Email..." />
            <br />
            <input class="password" @oninput="UpdatePassword" @onkeydown="EnterKeyPressed" @bind="userLoggingIn.Password" placeholder="Enter Password..." type="password" />
            <br />
        </div>
    <button class="login-btn" @onclick="loginCheck">Login</button>
    <br />
    <a class="createNew" @onclick="navigateToCreateAccount">Create a new account</a>
</div>

<style>
    body {
        background-image: url(/images/download.jpg);
        background-repeat: no-repeat;
        margin: 0;
        padding: 0;
        background-size: cover;
    }
</style>

@if (loginFailed)
{
    <div class="alert">
        Incorrect email or password...
    </div>
}

@if (loginSuccess)
{
    <div class="success">
        Logged In!
        <br />
        Welcome, @userFromDb.FirstName @userFromDb.LastName
    </div>
    if (!string.IsNullOrEmpty(returnUrl))
    {
        LoginService.RedirectLastPage(userFromDb.FirstName, userFromDb.LastName, loginSuccess, returnUrl, userFromDb.ProfileId);
    }
}

@code {
    [Parameter]
    public string returnUrl { get; set; } = string.Empty;

    public UserClasses.UserData userLoggingIn = new UserClasses.UserData();
    public UserClasses.UserProfiles userFromDb = new UserClasses.UserProfiles();
  
    private bool loginSuccess = false;
    private bool loginFailed = false;

    private string connectionString = "Host=ep-purple-star-a20n8auz.eu-central-1.aws.neon.tech;Port=5432;Username=techvendo69;Password=qVyZgOJ36HtK;Database=TechVendo;SslMode=Require;";
    private NpgsqlConnection connection;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        connection = new NpgsqlConnection(connectionString);
        connection.Open();

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParameters = System.Web.HttpUtility.ParseQueryString(uri.Query);
        returnUrl = queryParameters["returnUrl"];
    }

    private void EnterKeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            loginCheck();
        }
    }

    private void UpdateEmail(ChangeEventArgs e)
    {
        userLoggingIn.Email = e.Value.ToString();
    }

    private void UpdatePassword(ChangeEventArgs e)
    {
        userLoggingIn.Password = e.Value.ToString();
    }

    private void loginCheck()
    {
        loginFailed = false;
        loginSuccess = false;
        userFromDb.Email = null;
        userFromDb.Password = null;

        string SelectSQL = $"SELECT * FROM userprofiles WHERE email = '{userLoggingIn.Email}' AND password = crypt('{userLoggingIn.Password}', password)";

        using (NpgsqlCommand command = new NpgsqlCommand(SelectSQL, connection))
        {
            using (NpgsqlDataReader reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    userFromDb.Email = reader["email"].ToString();
                    userFromDb.Password = reader["password"].ToString();
                    userFromDb.FirstName = reader["firstname"].ToString();
                    userFromDb.LastName = reader["lastname"].ToString();
                    userFromDb.ProfileId = (int)reader["id"];
                }
            }
        }
        Thread.Sleep(800);

        if (string.IsNullOrEmpty(userFromDb.Email) && string.IsNullOrEmpty(userFromDb.LastName))
        {
            loginFailed = true;
        }
        else
        {
            loginSuccess = true;
        }
    }
    private void navigateToCreateAccount()
    {
        NavigationManager.NavigateTo("/createaccount");
    }

}